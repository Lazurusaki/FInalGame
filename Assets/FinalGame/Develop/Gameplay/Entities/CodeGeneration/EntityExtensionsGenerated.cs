public static class EntityExtensionsGenerated
{
public static FinalGame.Develop.Gameplay.Entities.Entity AddMoveSpeed(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.MoveSpeed, new FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>());
public static FinalGame.Develop.Gameplay.Entities.Entity AddMoveSpeed(this FinalGame.Develop.Gameplay.Entities.Entity entity, FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.MoveSpeed, value);
public static FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> GetMoveSpeed(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(FinalGame.Develop.Gameplay.Entities.EntityValues.MoveSpeed);
public static System.Boolean TryGetMoveSpeed(this FinalGame.Develop.Gameplay.Entities.Entity entity, out FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.TryGetValue<FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(FinalGame.Develop.Gameplay.Entities.EntityValues.MoveSpeed, out value);
public static FinalGame.Develop.Gameplay.Entities.Entity AddMoveDirection(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.MoveDirection, new FinalGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3>());
public static FinalGame.Develop.Gameplay.Entities.Entity AddMoveDirection(this FinalGame.Develop.Gameplay.Entities.Entity entity, FinalGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3> value) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.MoveDirection, value);
public static FinalGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3> GetMoveDirection(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<FinalGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3>>(FinalGame.Develop.Gameplay.Entities.EntityValues.MoveDirection);
public static System.Boolean TryGetMoveDirection(this FinalGame.Develop.Gameplay.Entities.Entity entity, out FinalGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3> value) => entity.TryGetValue<FinalGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3>>(FinalGame.Develop.Gameplay.Entities.EntityValues.MoveDirection, out value);
public static FinalGame.Develop.Gameplay.Entities.Entity AddMoveCondition(this FinalGame.Develop.Gameplay.Entities.Entity entity, FinalGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.MoveCondition, value);
public static FinalGame.Develop.Utils.Conditions.ICompositeCondition GetMoveCondition(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<FinalGame.Develop.Utils.Conditions.ICompositeCondition>(FinalGame.Develop.Gameplay.Entities.EntityValues.MoveCondition);
public static System.Boolean TryGetMoveCondition(this FinalGame.Develop.Gameplay.Entities.Entity entity, out FinalGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.TryGetValue<FinalGame.Develop.Utils.Conditions.ICompositeCondition>(FinalGame.Develop.Gameplay.Entities.EntityValues.MoveCondition, out value);
public static FinalGame.Develop.Gameplay.Entities.Entity AddIsMoving(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.IsMoving, new FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>());
public static FinalGame.Develop.Gameplay.Entities.Entity AddIsMoving(this FinalGame.Develop.Gameplay.Entities.Entity entity, FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> value) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.IsMoving, value);
public static FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> GetIsMoving(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>>(FinalGame.Develop.Gameplay.Entities.EntityValues.IsMoving);
public static System.Boolean TryGetIsMoving(this FinalGame.Develop.Gameplay.Entities.Entity entity, out FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> value) => entity.TryGetValue<FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>>(FinalGame.Develop.Gameplay.Entities.EntityValues.IsMoving, out value);
public static FinalGame.Develop.Gameplay.Entities.Entity AddRotationSpeed(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.RotationSpeed, new FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>());
public static FinalGame.Develop.Gameplay.Entities.Entity AddRotationSpeed(this FinalGame.Develop.Gameplay.Entities.Entity entity, FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.RotationSpeed, value);
public static FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> GetRotationSpeed(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(FinalGame.Develop.Gameplay.Entities.EntityValues.RotationSpeed);
public static System.Boolean TryGetRotationSpeed(this FinalGame.Develop.Gameplay.Entities.Entity entity, out FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.TryGetValue<FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(FinalGame.Develop.Gameplay.Entities.EntityValues.RotationSpeed, out value);
public static FinalGame.Develop.Gameplay.Entities.Entity AddRotationDirection(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.RotationDirection, new FinalGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3>());
public static FinalGame.Develop.Gameplay.Entities.Entity AddRotationDirection(this FinalGame.Develop.Gameplay.Entities.Entity entity, FinalGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3> value) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.RotationDirection, value);
public static FinalGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3> GetRotationDirection(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<FinalGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3>>(FinalGame.Develop.Gameplay.Entities.EntityValues.RotationDirection);
public static System.Boolean TryGetRotationDirection(this FinalGame.Develop.Gameplay.Entities.Entity entity, out FinalGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3> value) => entity.TryGetValue<FinalGame.Develop.Utils.Reactive.ReactiveVariable<UnityEngine.Vector3>>(FinalGame.Develop.Gameplay.Entities.EntityValues.RotationDirection, out value);
public static FinalGame.Develop.Gameplay.Entities.Entity AddRotationCondition(this FinalGame.Develop.Gameplay.Entities.Entity entity, FinalGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.RotationCondition, value);
public static FinalGame.Develop.Utils.Conditions.ICompositeCondition GetRotationCondition(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<FinalGame.Develop.Utils.Conditions.ICompositeCondition>(FinalGame.Develop.Gameplay.Entities.EntityValues.RotationCondition);
public static System.Boolean TryGetRotationCondition(this FinalGame.Develop.Gameplay.Entities.Entity entity, out FinalGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.TryGetValue<FinalGame.Develop.Utils.Conditions.ICompositeCondition>(FinalGame.Develop.Gameplay.Entities.EntityValues.RotationCondition, out value);
public static FinalGame.Develop.Gameplay.Entities.Entity AddSelfTriggerDamage(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.SelfTriggerDamage, new FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>());
public static FinalGame.Develop.Gameplay.Entities.Entity AddSelfTriggerDamage(this FinalGame.Develop.Gameplay.Entities.Entity entity, FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.SelfTriggerDamage, value);
public static FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> GetSelfTriggerDamage(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(FinalGame.Develop.Gameplay.Entities.EntityValues.SelfTriggerDamage);
public static System.Boolean TryGetSelfTriggerDamage(this FinalGame.Develop.Gameplay.Entities.Entity entity, out FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.TryGetValue<FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(FinalGame.Develop.Gameplay.Entities.EntityValues.SelfTriggerDamage, out value);
public static FinalGame.Develop.Gameplay.Entities.Entity AddSelfTriggerReceiver(this FinalGame.Develop.Gameplay.Entities.Entity entity, FinalGame.Develop.Gameplay.AI.Sensors.TriggerReceiver value) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.SelfTriggerReceiver, value);
public static FinalGame.Develop.Gameplay.AI.Sensors.TriggerReceiver GetSelfTriggerReceiver(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<FinalGame.Develop.Gameplay.AI.Sensors.TriggerReceiver>(FinalGame.Develop.Gameplay.Entities.EntityValues.SelfTriggerReceiver);
public static System.Boolean TryGetSelfTriggerReceiver(this FinalGame.Develop.Gameplay.Entities.Entity entity, out FinalGame.Develop.Gameplay.AI.Sensors.TriggerReceiver value) => entity.TryGetValue<FinalGame.Develop.Gameplay.AI.Sensors.TriggerReceiver>(FinalGame.Develop.Gameplay.Entities.EntityValues.SelfTriggerReceiver, out value);
public static FinalGame.Develop.Gameplay.Entities.Entity AddCharacterController(this FinalGame.Develop.Gameplay.Entities.Entity entity, UnityEngine.CharacterController value) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.CharacterController, value);
public static UnityEngine.CharacterController GetCharacterController(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<UnityEngine.CharacterController>(FinalGame.Develop.Gameplay.Entities.EntityValues.CharacterController);
public static System.Boolean TryGetCharacterController(this FinalGame.Develop.Gameplay.Entities.Entity entity, out UnityEngine.CharacterController value) => entity.TryGetValue<UnityEngine.CharacterController>(FinalGame.Develop.Gameplay.Entities.EntityValues.CharacterController, out value);
public static FinalGame.Develop.Gameplay.Entities.Entity AddTransform(this FinalGame.Develop.Gameplay.Entities.Entity entity, UnityEngine.Transform value) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.Transform, value);
public static UnityEngine.Transform GetTransform(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<UnityEngine.Transform>(FinalGame.Develop.Gameplay.Entities.EntityValues.Transform);
public static System.Boolean TryGetTransform(this FinalGame.Develop.Gameplay.Entities.Entity entity, out UnityEngine.Transform value) => entity.TryGetValue<UnityEngine.Transform>(FinalGame.Develop.Gameplay.Entities.EntityValues.Transform, out value);
public static FinalGame.Develop.Gameplay.Entities.Entity AddHealth(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.Health, new FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>());
public static FinalGame.Develop.Gameplay.Entities.Entity AddHealth(this FinalGame.Develop.Gameplay.Entities.Entity entity, FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.Health, value);
public static FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> GetHealth(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(FinalGame.Develop.Gameplay.Entities.EntityValues.Health);
public static System.Boolean TryGetHealth(this FinalGame.Develop.Gameplay.Entities.Entity entity, out FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.TryGetValue<FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(FinalGame.Develop.Gameplay.Entities.EntityValues.Health, out value);
public static FinalGame.Develop.Gameplay.Entities.Entity AddMaxHealth(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.MaxHealth, new FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>());
public static FinalGame.Develop.Gameplay.Entities.Entity AddMaxHealth(this FinalGame.Develop.Gameplay.Entities.Entity entity, FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.MaxHealth, value);
public static FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> GetMaxHealth(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(FinalGame.Develop.Gameplay.Entities.EntityValues.MaxHealth);
public static System.Boolean TryGetMaxHealth(this FinalGame.Develop.Gameplay.Entities.Entity entity, out FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.TryGetValue<FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(FinalGame.Develop.Gameplay.Entities.EntityValues.MaxHealth, out value);
public static FinalGame.Develop.Gameplay.Entities.Entity AddEnergy(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.Energy, new FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>());
public static FinalGame.Develop.Gameplay.Entities.Entity AddEnergy(this FinalGame.Develop.Gameplay.Entities.Entity entity, FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.Energy, value);
public static FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> GetEnergy(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(FinalGame.Develop.Gameplay.Entities.EntityValues.Energy);
public static System.Boolean TryGetEnergy(this FinalGame.Develop.Gameplay.Entities.Entity entity, out FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.TryGetValue<FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(FinalGame.Develop.Gameplay.Entities.EntityValues.Energy, out value);
public static FinalGame.Develop.Gameplay.Entities.Entity AddMaxEnergy(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.MaxEnergy, new FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>());
public static FinalGame.Develop.Gameplay.Entities.Entity AddMaxEnergy(this FinalGame.Develop.Gameplay.Entities.Entity entity, FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.MaxEnergy, value);
public static FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> GetMaxEnergy(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(FinalGame.Develop.Gameplay.Entities.EntityValues.MaxEnergy);
public static System.Boolean TryGetMaxEnergy(this FinalGame.Develop.Gameplay.Entities.Entity entity, out FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.TryGetValue<FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(FinalGame.Develop.Gameplay.Entities.EntityValues.MaxEnergy, out value);
public static FinalGame.Develop.Gameplay.Entities.Entity AddSpendEnergyRequest(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.SpendEnergyRequest, new FinalGame.Develop.Utils.Reactive.ReactiveEvent<System.Single>());
public static FinalGame.Develop.Gameplay.Entities.Entity AddSpendEnergyRequest(this FinalGame.Develop.Gameplay.Entities.Entity entity, FinalGame.Develop.Utils.Reactive.ReactiveEvent<System.Single> value) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.SpendEnergyRequest, value);
public static FinalGame.Develop.Utils.Reactive.ReactiveEvent<System.Single> GetSpendEnergyRequest(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<FinalGame.Develop.Utils.Reactive.ReactiveEvent<System.Single>>(FinalGame.Develop.Gameplay.Entities.EntityValues.SpendEnergyRequest);
public static System.Boolean TryGetSpendEnergyRequest(this FinalGame.Develop.Gameplay.Entities.Entity entity, out FinalGame.Develop.Utils.Reactive.ReactiveEvent<System.Single> value) => entity.TryGetValue<FinalGame.Develop.Utils.Reactive.ReactiveEvent<System.Single>>(FinalGame.Develop.Gameplay.Entities.EntityValues.SpendEnergyRequest, out value);
public static FinalGame.Develop.Gameplay.Entities.Entity AddSpendEnergyCondition(this FinalGame.Develop.Gameplay.Entities.Entity entity, FinalGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.SpendEnergyCondition, value);
public static FinalGame.Develop.Utils.Conditions.ICompositeCondition GetSpendEnergyCondition(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<FinalGame.Develop.Utils.Conditions.ICompositeCondition>(FinalGame.Develop.Gameplay.Entities.EntityValues.SpendEnergyCondition);
public static System.Boolean TryGetSpendEnergyCondition(this FinalGame.Develop.Gameplay.Entities.Entity entity, out FinalGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.TryGetValue<FinalGame.Develop.Utils.Conditions.ICompositeCondition>(FinalGame.Develop.Gameplay.Entities.EntityValues.SpendEnergyCondition, out value);
public static FinalGame.Develop.Gameplay.Entities.Entity AddSpendEnergyEvent(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.SpendEnergyEvent, new FinalGame.Develop.Utils.Reactive.ReactiveEvent<System.Single>());
public static FinalGame.Develop.Gameplay.Entities.Entity AddSpendEnergyEvent(this FinalGame.Develop.Gameplay.Entities.Entity entity, FinalGame.Develop.Utils.Reactive.ReactiveEvent<System.Single> value) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.SpendEnergyEvent, value);
public static FinalGame.Develop.Utils.Reactive.ReactiveEvent<System.Single> GetSpendEnergyEvent(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<FinalGame.Develop.Utils.Reactive.ReactiveEvent<System.Single>>(FinalGame.Develop.Gameplay.Entities.EntityValues.SpendEnergyEvent);
public static System.Boolean TryGetSpendEnergyEvent(this FinalGame.Develop.Gameplay.Entities.Entity entity, out FinalGame.Develop.Utils.Reactive.ReactiveEvent<System.Single> value) => entity.TryGetValue<FinalGame.Develop.Utils.Reactive.ReactiveEvent<System.Single>>(FinalGame.Develop.Gameplay.Entities.EntityValues.SpendEnergyEvent, out value);
public static FinalGame.Develop.Gameplay.Entities.Entity AddRestoreEnergyEvent(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.RestoreEnergyEvent, new FinalGame.Develop.Utils.Reactive.ReactiveEvent<System.Single>());
public static FinalGame.Develop.Gameplay.Entities.Entity AddRestoreEnergyEvent(this FinalGame.Develop.Gameplay.Entities.Entity entity, FinalGame.Develop.Utils.Reactive.ReactiveEvent<System.Single> value) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.RestoreEnergyEvent, value);
public static FinalGame.Develop.Utils.Reactive.ReactiveEvent<System.Single> GetRestoreEnergyEvent(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<FinalGame.Develop.Utils.Reactive.ReactiveEvent<System.Single>>(FinalGame.Develop.Gameplay.Entities.EntityValues.RestoreEnergyEvent);
public static System.Boolean TryGetRestoreEnergyEvent(this FinalGame.Develop.Gameplay.Entities.Entity entity, out FinalGame.Develop.Utils.Reactive.ReactiveEvent<System.Single> value) => entity.TryGetValue<FinalGame.Develop.Utils.Reactive.ReactiveEvent<System.Single>>(FinalGame.Develop.Gameplay.Entities.EntityValues.RestoreEnergyEvent, out value);
public static FinalGame.Develop.Gameplay.Entities.Entity AddRestoreEnergyCooldown(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.RestoreEnergyCooldown, new FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>());
public static FinalGame.Develop.Gameplay.Entities.Entity AddRestoreEnergyCooldown(this FinalGame.Develop.Gameplay.Entities.Entity entity, FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.RestoreEnergyCooldown, value);
public static FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> GetRestoreEnergyCooldown(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(FinalGame.Develop.Gameplay.Entities.EntityValues.RestoreEnergyCooldown);
public static System.Boolean TryGetRestoreEnergyCooldown(this FinalGame.Develop.Gameplay.Entities.Entity entity, out FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.TryGetValue<FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(FinalGame.Develop.Gameplay.Entities.EntityValues.RestoreEnergyCooldown, out value);
public static FinalGame.Develop.Gameplay.Entities.Entity AddRestoreEnergyCondition(this FinalGame.Develop.Gameplay.Entities.Entity entity, FinalGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.RestoreEnergyCondition, value);
public static FinalGame.Develop.Utils.Conditions.ICompositeCondition GetRestoreEnergyCondition(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<FinalGame.Develop.Utils.Conditions.ICompositeCondition>(FinalGame.Develop.Gameplay.Entities.EntityValues.RestoreEnergyCondition);
public static System.Boolean TryGetRestoreEnergyCondition(this FinalGame.Develop.Gameplay.Entities.Entity entity, out FinalGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.TryGetValue<FinalGame.Develop.Utils.Conditions.ICompositeCondition>(FinalGame.Develop.Gameplay.Entities.EntityValues.RestoreEnergyCondition, out value);
public static FinalGame.Develop.Gameplay.Entities.Entity AddRadiusAttackDamage(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.RadiusAttackDamage, new FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>());
public static FinalGame.Develop.Gameplay.Entities.Entity AddRadiusAttackDamage(this FinalGame.Develop.Gameplay.Entities.Entity entity, FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.RadiusAttackDamage, value);
public static FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> GetRadiusAttackDamage(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(FinalGame.Develop.Gameplay.Entities.EntityValues.RadiusAttackDamage);
public static System.Boolean TryGetRadiusAttackDamage(this FinalGame.Develop.Gameplay.Entities.Entity entity, out FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.TryGetValue<FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(FinalGame.Develop.Gameplay.Entities.EntityValues.RadiusAttackDamage, out value);
public static FinalGame.Develop.Gameplay.Entities.Entity AddRadiusAttackRadius(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.RadiusAttackRadius, new FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>());
public static FinalGame.Develop.Gameplay.Entities.Entity AddRadiusAttackRadius(this FinalGame.Develop.Gameplay.Entities.Entity entity, FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.RadiusAttackRadius, value);
public static FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> GetRadiusAttackRadius(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(FinalGame.Develop.Gameplay.Entities.EntityValues.RadiusAttackRadius);
public static System.Boolean TryGetRadiusAttackRadius(this FinalGame.Develop.Gameplay.Entities.Entity entity, out FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.TryGetValue<FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(FinalGame.Develop.Gameplay.Entities.EntityValues.RadiusAttackRadius, out value);
public static FinalGame.Develop.Gameplay.Entities.Entity AddRadiusAttackTrigger(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.RadiusAttackTrigger, new FinalGame.Develop.Utils.Reactive.ReactiveEvent());
public static FinalGame.Develop.Gameplay.Entities.Entity AddRadiusAttackTrigger(this FinalGame.Develop.Gameplay.Entities.Entity entity, FinalGame.Develop.Utils.Reactive.ReactiveEvent value) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.RadiusAttackTrigger, value);
public static FinalGame.Develop.Utils.Reactive.ReactiveEvent GetRadiusAttackTrigger(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<FinalGame.Develop.Utils.Reactive.ReactiveEvent>(FinalGame.Develop.Gameplay.Entities.EntityValues.RadiusAttackTrigger);
public static System.Boolean TryGetRadiusAttackTrigger(this FinalGame.Develop.Gameplay.Entities.Entity entity, out FinalGame.Develop.Utils.Reactive.ReactiveEvent value) => entity.TryGetValue<FinalGame.Develop.Utils.Reactive.ReactiveEvent>(FinalGame.Develop.Gameplay.Entities.EntityValues.RadiusAttackTrigger, out value);
public static FinalGame.Develop.Gameplay.Entities.Entity AddTeleportRadius(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.TeleportRadius, new FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>());
public static FinalGame.Develop.Gameplay.Entities.Entity AddTeleportRadius(this FinalGame.Develop.Gameplay.Entities.Entity entity, FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.TeleportRadius, value);
public static FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> GetTeleportRadius(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(FinalGame.Develop.Gameplay.Entities.EntityValues.TeleportRadius);
public static System.Boolean TryGetTeleportRadius(this FinalGame.Develop.Gameplay.Entities.Entity entity, out FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.TryGetValue<FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(FinalGame.Develop.Gameplay.Entities.EntityValues.TeleportRadius, out value);
public static FinalGame.Develop.Gameplay.Entities.Entity AddTeleportEnergyCost(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.TeleportEnergyCost, new FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>());
public static FinalGame.Develop.Gameplay.Entities.Entity AddTeleportEnergyCost(this FinalGame.Develop.Gameplay.Entities.Entity entity, FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.TeleportEnergyCost, value);
public static FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> GetTeleportEnergyCost(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(FinalGame.Develop.Gameplay.Entities.EntityValues.TeleportEnergyCost);
public static System.Boolean TryGetTeleportEnergyCost(this FinalGame.Develop.Gameplay.Entities.Entity entity, out FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single> value) => entity.TryGetValue<FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Single>>(FinalGame.Develop.Gameplay.Entities.EntityValues.TeleportEnergyCost, out value);
public static FinalGame.Develop.Gameplay.Entities.Entity AddTeleportCondition(this FinalGame.Develop.Gameplay.Entities.Entity entity, FinalGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.TeleportCondition, value);
public static FinalGame.Develop.Utils.Conditions.ICompositeCondition GetTeleportCondition(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<FinalGame.Develop.Utils.Conditions.ICompositeCondition>(FinalGame.Develop.Gameplay.Entities.EntityValues.TeleportCondition);
public static System.Boolean TryGetTeleportCondition(this FinalGame.Develop.Gameplay.Entities.Entity entity, out FinalGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.TryGetValue<FinalGame.Develop.Utils.Conditions.ICompositeCondition>(FinalGame.Develop.Gameplay.Entities.EntityValues.TeleportCondition, out value);
public static FinalGame.Develop.Gameplay.Entities.Entity AddTeleportTrigger(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.TeleportTrigger, new FinalGame.Develop.Utils.Reactive.ReactiveEvent());
public static FinalGame.Develop.Gameplay.Entities.Entity AddTeleportTrigger(this FinalGame.Develop.Gameplay.Entities.Entity entity, FinalGame.Develop.Utils.Reactive.ReactiveEvent value) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.TeleportTrigger, value);
public static FinalGame.Develop.Utils.Reactive.ReactiveEvent GetTeleportTrigger(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<FinalGame.Develop.Utils.Reactive.ReactiveEvent>(FinalGame.Develop.Gameplay.Entities.EntityValues.TeleportTrigger);
public static System.Boolean TryGetTeleportTrigger(this FinalGame.Develop.Gameplay.Entities.Entity entity, out FinalGame.Develop.Utils.Reactive.ReactiveEvent value) => entity.TryGetValue<FinalGame.Develop.Utils.Reactive.ReactiveEvent>(FinalGame.Develop.Gameplay.Entities.EntityValues.TeleportTrigger, out value);
public static FinalGame.Develop.Gameplay.Entities.Entity AddTeleportStartEvent(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.TeleportStartEvent, new FinalGame.Develop.Utils.Reactive.ReactiveEvent());
public static FinalGame.Develop.Gameplay.Entities.Entity AddTeleportStartEvent(this FinalGame.Develop.Gameplay.Entities.Entity entity, FinalGame.Develop.Utils.Reactive.ReactiveEvent value) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.TeleportStartEvent, value);
public static FinalGame.Develop.Utils.Reactive.ReactiveEvent GetTeleportStartEvent(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<FinalGame.Develop.Utils.Reactive.ReactiveEvent>(FinalGame.Develop.Gameplay.Entities.EntityValues.TeleportStartEvent);
public static System.Boolean TryGetTeleportStartEvent(this FinalGame.Develop.Gameplay.Entities.Entity entity, out FinalGame.Develop.Utils.Reactive.ReactiveEvent value) => entity.TryGetValue<FinalGame.Develop.Utils.Reactive.ReactiveEvent>(FinalGame.Develop.Gameplay.Entities.EntityValues.TeleportStartEvent, out value);
public static FinalGame.Develop.Gameplay.Entities.Entity AddTeleportEndEvent(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.TeleportEndEvent, new FinalGame.Develop.Utils.Reactive.ReactiveEvent());
public static FinalGame.Develop.Gameplay.Entities.Entity AddTeleportEndEvent(this FinalGame.Develop.Gameplay.Entities.Entity entity, FinalGame.Develop.Utils.Reactive.ReactiveEvent value) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.TeleportEndEvent, value);
public static FinalGame.Develop.Utils.Reactive.ReactiveEvent GetTeleportEndEvent(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<FinalGame.Develop.Utils.Reactive.ReactiveEvent>(FinalGame.Develop.Gameplay.Entities.EntityValues.TeleportEndEvent);
public static System.Boolean TryGetTeleportEndEvent(this FinalGame.Develop.Gameplay.Entities.Entity entity, out FinalGame.Develop.Utils.Reactive.ReactiveEvent value) => entity.TryGetValue<FinalGame.Develop.Utils.Reactive.ReactiveEvent>(FinalGame.Develop.Gameplay.Entities.EntityValues.TeleportEndEvent, out value);
public static FinalGame.Develop.Gameplay.Entities.Entity AddTakeDamageRequest(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.TakeDamageRequest, new FinalGame.Develop.Utils.Reactive.ReactiveEvent<System.Single>());
public static FinalGame.Develop.Gameplay.Entities.Entity AddTakeDamageRequest(this FinalGame.Develop.Gameplay.Entities.Entity entity, FinalGame.Develop.Utils.Reactive.ReactiveEvent<System.Single> value) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.TakeDamageRequest, value);
public static FinalGame.Develop.Utils.Reactive.ReactiveEvent<System.Single> GetTakeDamageRequest(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<FinalGame.Develop.Utils.Reactive.ReactiveEvent<System.Single>>(FinalGame.Develop.Gameplay.Entities.EntityValues.TakeDamageRequest);
public static System.Boolean TryGetTakeDamageRequest(this FinalGame.Develop.Gameplay.Entities.Entity entity, out FinalGame.Develop.Utils.Reactive.ReactiveEvent<System.Single> value) => entity.TryGetValue<FinalGame.Develop.Utils.Reactive.ReactiveEvent<System.Single>>(FinalGame.Develop.Gameplay.Entities.EntityValues.TakeDamageRequest, out value);
public static FinalGame.Develop.Gameplay.Entities.Entity AddTakeDamageEvent(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.TakeDamageEvent, new FinalGame.Develop.Utils.Reactive.ReactiveEvent<System.Single>());
public static FinalGame.Develop.Gameplay.Entities.Entity AddTakeDamageEvent(this FinalGame.Develop.Gameplay.Entities.Entity entity, FinalGame.Develop.Utils.Reactive.ReactiveEvent<System.Single> value) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.TakeDamageEvent, value);
public static FinalGame.Develop.Utils.Reactive.ReactiveEvent<System.Single> GetTakeDamageEvent(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<FinalGame.Develop.Utils.Reactive.ReactiveEvent<System.Single>>(FinalGame.Develop.Gameplay.Entities.EntityValues.TakeDamageEvent);
public static System.Boolean TryGetTakeDamageEvent(this FinalGame.Develop.Gameplay.Entities.Entity entity, out FinalGame.Develop.Utils.Reactive.ReactiveEvent<System.Single> value) => entity.TryGetValue<FinalGame.Develop.Utils.Reactive.ReactiveEvent<System.Single>>(FinalGame.Develop.Gameplay.Entities.EntityValues.TakeDamageEvent, out value);
public static FinalGame.Develop.Gameplay.Entities.Entity AddTakeDamageCondition(this FinalGame.Develop.Gameplay.Entities.Entity entity, FinalGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.TakeDamageCondition, value);
public static FinalGame.Develop.Utils.Conditions.ICompositeCondition GetTakeDamageCondition(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<FinalGame.Develop.Utils.Conditions.ICompositeCondition>(FinalGame.Develop.Gameplay.Entities.EntityValues.TakeDamageCondition);
public static System.Boolean TryGetTakeDamageCondition(this FinalGame.Develop.Gameplay.Entities.Entity entity, out FinalGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.TryGetValue<FinalGame.Develop.Utils.Conditions.ICompositeCondition>(FinalGame.Develop.Gameplay.Entities.EntityValues.TakeDamageCondition, out value);
public static FinalGame.Develop.Gameplay.Entities.Entity AddIsDead(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.IsDead, new FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>());
public static FinalGame.Develop.Gameplay.Entities.Entity AddIsDead(this FinalGame.Develop.Gameplay.Entities.Entity entity, FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> value) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.IsDead, value);
public static FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> GetIsDead(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>>(FinalGame.Develop.Gameplay.Entities.EntityValues.IsDead);
public static System.Boolean TryGetIsDead(this FinalGame.Develop.Gameplay.Entities.Entity entity, out FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> value) => entity.TryGetValue<FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>>(FinalGame.Develop.Gameplay.Entities.EntityValues.IsDead, out value);
public static FinalGame.Develop.Gameplay.Entities.Entity AddIsDeathProcess(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.IsDeathProcess, new FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>());
public static FinalGame.Develop.Gameplay.Entities.Entity AddIsDeathProcess(this FinalGame.Develop.Gameplay.Entities.Entity entity, FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> value) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.IsDeathProcess, value);
public static FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> GetIsDeathProcess(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>>(FinalGame.Develop.Gameplay.Entities.EntityValues.IsDeathProcess);
public static System.Boolean TryGetIsDeathProcess(this FinalGame.Develop.Gameplay.Entities.Entity entity, out FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean> value) => entity.TryGetValue<FinalGame.Develop.Utils.Reactive.ReactiveVariable<System.Boolean>>(FinalGame.Develop.Gameplay.Entities.EntityValues.IsDeathProcess, out value);
public static FinalGame.Develop.Gameplay.Entities.Entity AddDeathCondition(this FinalGame.Develop.Gameplay.Entities.Entity entity, FinalGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.DeathCondition, value);
public static FinalGame.Develop.Utils.Conditions.ICompositeCondition GetDeathCondition(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<FinalGame.Develop.Utils.Conditions.ICompositeCondition>(FinalGame.Develop.Gameplay.Entities.EntityValues.DeathCondition);
public static System.Boolean TryGetDeathCondition(this FinalGame.Develop.Gameplay.Entities.Entity entity, out FinalGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.TryGetValue<FinalGame.Develop.Utils.Conditions.ICompositeCondition>(FinalGame.Develop.Gameplay.Entities.EntityValues.DeathCondition, out value);
public static FinalGame.Develop.Gameplay.Entities.Entity AddSelfDestroyCondition(this FinalGame.Develop.Gameplay.Entities.Entity entity, FinalGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.AddValue(FinalGame.Develop.Gameplay.Entities.EntityValues.SelfDestroyCondition, value);
public static FinalGame.Develop.Utils.Conditions.ICompositeCondition GetSelfDestroyCondition(this FinalGame.Develop.Gameplay.Entities.Entity entity) => entity.GetValue<FinalGame.Develop.Utils.Conditions.ICompositeCondition>(FinalGame.Develop.Gameplay.Entities.EntityValues.SelfDestroyCondition);
public static System.Boolean TryGetSelfDestroyCondition(this FinalGame.Develop.Gameplay.Entities.Entity entity, out FinalGame.Develop.Utils.Conditions.ICompositeCondition value) => entity.TryGetValue<FinalGame.Develop.Utils.Conditions.ICompositeCondition>(FinalGame.Develop.Gameplay.Entities.EntityValues.SelfDestroyCondition, out value);
}
